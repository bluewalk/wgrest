// Code generated by go-swagger; DO NOT EDIT.

package wireguard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/suquant/wgrest/models"
)

// PeersCorsOKCode is the HTTP code returned for type PeersCorsOK
const PeersCorsOKCode int = 200

/*PeersCorsOK ok

swagger:response peersCorsOK
*/
type PeersCorsOK struct {
	/*

	  Default: []interface {}{"GET", "POST"}
	*/
	AccessControlAllowMethods []string `json:"Access-Control-Allow-Methods"`
}

// NewPeersCorsOK creates PeersCorsOK with default headers values
func NewPeersCorsOK() *PeersCorsOK {

	var (
		// initialize headers with default values

		accessControlAllowMethodsDefault = []string{"GET", "POST"}
	)

	return &PeersCorsOK{

		AccessControlAllowMethods: accessControlAllowMethodsDefault,
	}
}

// WithAccessControlAllowMethods adds the accessControlAllowMethods to the peers cors o k response
func (o *PeersCorsOK) WithAccessControlAllowMethods(accessControlAllowMethods []string) *PeersCorsOK {
	o.AccessControlAllowMethods = accessControlAllowMethods
	return o
}

// SetAccessControlAllowMethods sets the accessControlAllowMethods to the peers cors o k response
func (o *PeersCorsOK) SetAccessControlAllowMethods(accessControlAllowMethods []string) {
	o.AccessControlAllowMethods = accessControlAllowMethods
}

// WriteResponse to the client
func (o *PeersCorsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Access-Control-Allow-Methods

	var accessControlAllowMethodsIR []string
	for _, accessControlAllowMethodsI := range o.AccessControlAllowMethods {
		accessControlAllowMethodsIS := accessControlAllowMethodsI
		if accessControlAllowMethodsIS != "" {
			accessControlAllowMethodsIR = append(accessControlAllowMethodsIR, accessControlAllowMethodsIS)
		}
	}
	accessControlAllowMethods := swag.JoinByFormat(accessControlAllowMethodsIR, "")
	if len(accessControlAllowMethods) > 0 {
		hv := accessControlAllowMethods[0]
		if hv != "" {
			rw.Header().Set("Access-Control-Allow-Methods", hv)
		}
	}

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

/*PeersCorsDefault error

swagger:response peersCorsDefault
*/
type PeersCorsDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPeersCorsDefault creates PeersCorsDefault with default headers values
func NewPeersCorsDefault(code int) *PeersCorsDefault {
	if code <= 0 {
		code = 500
	}

	return &PeersCorsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the peers cors default response
func (o *PeersCorsDefault) WithStatusCode(code int) *PeersCorsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the peers cors default response
func (o *PeersCorsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the peers cors default response
func (o *PeersCorsDefault) WithPayload(payload *models.Error) *PeersCorsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the peers cors default response
func (o *PeersCorsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PeersCorsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
