// Code generated by go-swagger; DO NOT EDIT.

package wireguard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PeerCorsHandlerFunc turns a function with the right signature into a peer cors handler
type PeerCorsHandlerFunc func(PeerCorsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PeerCorsHandlerFunc) Handle(params PeerCorsParams) middleware.Responder {
	return fn(params)
}

// PeerCorsHandler interface for that can handle valid peer cors params
type PeerCorsHandler interface {
	Handle(PeerCorsParams) middleware.Responder
}

// NewPeerCors creates a new http.Handler for the peer cors operation
func NewPeerCors(ctx *middleware.Context, handler PeerCorsHandler) *PeerCors {
	return &PeerCors{Context: ctx, Handler: handler}
}

/* PeerCors swagger:route OPTIONS /devices/{dev}/peers/{peer_id} wireguard peerCors

CORS wireguard peers

*/
type PeerCors struct {
	Context *middleware.Context
	Handler PeerCorsHandler
}

func (o *PeerCors) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPeerCorsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
