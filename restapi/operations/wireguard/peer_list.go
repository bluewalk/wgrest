// Code generated by go-swagger; DO NOT EDIT.

package wireguard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PeerListHandlerFunc turns a function with the right signature into a peer list handler
type PeerListHandlerFunc func(PeerListParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PeerListHandlerFunc) Handle(params PeerListParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PeerListHandler interface for that can handle valid peer list params
type PeerListHandler interface {
	Handle(PeerListParams, interface{}) middleware.Responder
}

// NewPeerList creates a new http.Handler for the peer list operation
func NewPeerList(ctx *middleware.Context, handler PeerListHandler) *PeerList {
	return &PeerList{Context: ctx, Handler: handler}
}

/* PeerList swagger:route GET /devices/{dev}/peers/ wireguard peerList

get wireguard device's peers

*/
type PeerList struct {
	Context *middleware.Context
	Handler PeerListHandler
}

func (o *PeerList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPeerListParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
